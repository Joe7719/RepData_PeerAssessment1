library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is/na(x)&x>0]
x[!is.na(x)&x>0]
x[3,5,7]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(y_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_date
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5 != 7
NOT(5==7)
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints < sample(10)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all()
all(ints)
all(ints >0)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors,6)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean())
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat()
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique())
unique_vals <- lapply(flags, unique)
unique_vals
length()
length(unique_vals)
sapply(uniques_vals, length)
sapply(unique_val, length)
sapply(unique_vals, length)
sapply(flags, unique)
lappy(unique_vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plant, 10)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample()
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTER
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 07))
sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = , prob = 0.7)
flips2 <- rbinom(100, size =1 , prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
play()
?rpois
nxt()
rpois(5,10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- SyS.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d)
unclass(d2)
t1 <- sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unless(t2))
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(speed, dist)
plot("speed","dist")
?plot
plot(1,2)
plot(x = cars$speed, y= cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y= cars$dist)
plot(x = cars$speed, y= cars$dist, xlab = "Speed")
plot(x = cars$speed, y= cars$dist, xlab = "Speed", ylab = "Distance")
plot(x = cars$speed, y= cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y= cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y= cars$dist, xlab = "Speed" , ylab = "Stopping Distance")
plot(cars, main= "My Plot")
plot(cars, subtitle="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10,15))
plot(cars, pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(mtcars, formula= mpg ~ cyl)
boxplot(data = mtcars, formula= mpg ~ cyl)
boxplot(formula= mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
quit
search()
library(datasets)
data(iris)
summary(iris)
sapply(split(iris$Sepal.Length, iris$Species), mean)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
rnorm(10)
x <- rrom(10, 20, 2)
x <- rnorm(10, 20, 2)
set.seed(2)
x <- rnorm(100)
x <- rnorm(100, 0, 2)
y <- 0.5 + (2*x) + e
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + (2*x) + e
plot(x,y)
system.time(rnorm)
system.time(rnorm(1000,20,2))
system.time(rnorm(100000,20,2))
system.time(readLines("http://www.jhsph.edu"))
library(xml)
library(XML)
library(mysql)
install.packages("RMySQL")
library(RMySQL)
ucscDB <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDB,"show databases;"); dbDisconnect(ucscDB)
result <- dbGetQuery(ucscDB,"show databases;"); dbDisconnect(ucscDB);
ucscDB <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB,"show databases;"); dbDisconnect(ucscDB);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
query <- dbSendQuery(hg19, "SELECT * FROM affyU133Plus2 WHERE misMatches BETWEEN 1 AND 3")
query <- dbSendQuery(hg19, "SELECT * FROM affyU133Plus2 WHERE misMatches BETWEEN 1 AND 3")
affyis < fetch(query); quantile(affyMis$misMatches)
dbDisconnect(ucscDB);
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created <- h5createFile("example.h5")
created
created <- h5createGroup("example.h5","foo")
created <- h5createGroup("example.h5","baa")
created <- h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html <- readLines(con)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
htmlCode <- readLines(con)
htmlCode
head(htmlCode)
con2 <- url("http://biostat.jhsph.edu/~jleek/contact.html")
myCode <- readLines(con2)
myCode
nchar(myCode[4])
nchar(myCode[10])
nchar(myCode[20])
nchar(myCode[30])
nchar(myCode[100])
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
example(points)
?Devices
getwd()
x <- rnorm(100)
y <- rpois(100)
pdf(file="test.pdf")
with(data, plot(x,y))
title(main="getgocharting")
dev.off()
x <- rnorm(100)
y <- rpois(100, lambda = 4)
pdf(file="test.pdf")
with(data, plot(x,y))
title(main="getgocharting")
dev.off()
x <- rnorm(100)
y <- rpois(100, lambda = 4)
pdf(file="test.pdf")
with(data33, plot(x,y))
title(main="getgocharting")
dev.off()
x <- rnorm(100)
y <- rpois(100, lambda = 4)
data33 <- c(x,y)
pdf(file="test.pdf")
with(data33, plot(x,y))
title(main="getgocharting")
dev.off()
setwd("C:\\Users\\Joe\\_LEARNING_todo\\___Data Science\\5 Reproducible Research\\Peer Assessment 1\\RepData_PeerAssessment1\\")
getwd()
unzip("C:\\Users\\Joe\\_LEARNING_todo\\___Data Science\\5 Reproducible Research\\Peer Assessment 1\\RepData_PeerAssessment1\\activity.zip")
activityData <- data <- read.csv("activity.csv")
head(activityData)
summary(activityData)
?read.csv
columnClass <- c("numeric","Date","numeric")
activityData <- data <- read.csv("activity.csv", colClasses = columnClass)
class(activityData?steps)
summary(activityData)
class(activityData)
class(activityData$steps)
activityData
activityDataLessNA <- completeCases(activityData)
?complete.Cases
activityDataLessNA <- complete.cases(activityData)
head(activityData)
activityDataLessNA <- na.omit(activityData)
activityDataLessNA <- complete.cases(activityData)
head(activityDataLessNA)
activityDataLessNA <- na.omit(activityData)
head(activityDataLessNA)
nrow(activityDataLessNA)
activityData <- read.csv("activity.csv", colClasses = columnClass)
```
```
```{r}
setwd("C:\\Users\\Joe\\_LEARNING_todo\\___Data Science\\5 Reproducible Research\\Peer Assessment 1\\RepData_PeerAssessment1\\")
unzip("C:\\Users\\Joe\\_LEARNING_todo\\___Data Science\\5 Reproducible Research\\Peer Assessment 1\\RepData_PeerAssessment1\\activity.zip")
```
## Loading and preprocessing the data
```{r}
columnClass <- c("numeric","Date","numeric")
activityData <- read.csv("activity.csv", colClasses = columnClass)
activityDataLessNA <- na.omit(activityData)
```
```{r}
setwd("C:\\Users\\Joe\\_LEARNING_todo\\___Data Science\\5 Reproducible Research\\Peer Assessment 1\\RepData_PeerAssessment1\\")
unzip("C:\\Users\\Joe\\_LEARNING_todo\\___Data Science\\5 Reproducible Research\\Peer Assessment 1\\RepData_PeerAssessment1\\activity.zip")
```
## Loading and preprocessing the data
```{r}
setwd("C:\\Users\\Joe\\_LEARNING_todo\\___Data Science\\5 Reproducible Research\\Peer Assessment 1\\RepData_PeerAssessment1\\")
unzip("C:\\Users\\Joe\\_LEARNING_todo\\___Data Science\\5 Reproducible Research\\Peer Assessment 1\\RepData_PeerAssessment1\\activity.zip")
```
